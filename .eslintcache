[{"/Users/jacobsilver/Development/Projects/mark-contentful-app/src/index.tsx":"1","/Users/jacobsilver/Development/Projects/mark-contentful-app/src/components/LocalhostWarning.tsx":"2","/Users/jacobsilver/Development/Projects/mark-contentful-app/src/components/EntryEditor.tsx":"3","/Users/jacobsilver/Development/Projects/mark-contentful-app/src/components/Dialog.tsx":"4","/Users/jacobsilver/Development/Projects/mark-contentful-app/src/components/Sidebar.tsx":"5","/Users/jacobsilver/Development/Projects/mark-contentful-app/src/components/Field.tsx":"6","/Users/jacobsilver/Development/Projects/mark-contentful-app/src/components/ConfigScreen.tsx":"7","/Users/jacobsilver/Development/Projects/mark-contentful-app/src/components/Page.tsx":"8"},{"size":2328,"mtime":1610551323566,"results":"9","hashOfConfig":"10"},{"size":1232,"mtime":1610551323565,"results":"11","hashOfConfig":"10"},{"size":344,"mtime":1610551323564,"results":"12","hashOfConfig":"10"},{"size":340,"mtime":1610551323563,"results":"13","hashOfConfig":"10"},{"size":347,"mtime":1610551323566,"results":"14","hashOfConfig":"10"},{"size":3632,"mtime":1610576178830,"results":"15","hashOfConfig":"10"},{"size":2281,"mtime":1610551323563,"results":"16","hashOfConfig":"10"},{"size":326,"mtime":1610551323565,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"1qdvfio",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"32"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"/Users/jacobsilver/Development/Projects/mark-contentful-app/src/index.tsx",[],["37","38"],"/Users/jacobsilver/Development/Projects/mark-contentful-app/src/components/LocalhostWarning.tsx",[],"/Users/jacobsilver/Development/Projects/mark-contentful-app/src/components/EntryEditor.tsx",[],"/Users/jacobsilver/Development/Projects/mark-contentful-app/src/components/Dialog.tsx",[],"/Users/jacobsilver/Development/Projects/mark-contentful-app/src/components/Sidebar.tsx",[],"/Users/jacobsilver/Development/Projects/mark-contentful-app/src/components/Field.tsx",["39","40"],"// @ts-nocheck\nimport React, { useState, useEffect } from \"react\";\nimport {\n  TextField,\n  Button,\n  Pill,\n  Flex,\n  Select,\n  Option,\n  Notification,\n  SectionHeading,\n  Paragraph,\n} from \"@contentful/forma-36-react-components\";\nimport { FieldExtensionSDK } from \"contentful-ui-extensions-sdk\";\n\ninterface FieldProps {\n  sdk: FieldExtensionSDK;\n}\n\nconst Field = (props: FieldProps) => {\n  const [newValue, setNewValue] = useState(\"\");\n  const [values, setValues] = useState(props.sdk.field.getValue() || []);\n  const [allEntryValues, setAllEntryValues] = useState([]);\n\n  const fieldName = props.sdk.field.id;\n\n  function updateFieldValue() {\n    if (values && values.includes(newValue)) {\n      return Notification.warning(`${newValue} has already been added.`, {\n        duration: 3000,\n        canClose: true,\n        title: \"STOP FUCKING AROUND\",\n      });\n    }\n    values && newValue\n      ? props.sdk.field.setValue([...values, newValue])\n      : props.sdk.field.setValue([newValue]);\n    setNewValue(\"\");\n  }\n\n  function updateFieldValueSelect(e) {\n    if (values && values.includes(e.target.value)) {\n      return Notification.warning(`${e.target.value} has already been added`, {\n        duration: 3000,\n        canClose: true,\n        title: \"STOP FUCKING AROUND\",\n      });\n    }\n    props.sdk.field.setValue([...values, e.target.value]);\n  }\n\n  function removeValue(v) {\n    const filtered = values.filter((val) => val !== v);\n    props.sdk.field.setValue(filtered);\n  }\n\n  useEffect(() => {\n    // makes sure the iframe window height makes the whole component visible\n    props.sdk.window.startAutoResizer();\n    const allEntries = props.sdk.space.getEntries();\n    const allValues = [];\n    let uniqueValues = null;\n    allEntries.then((entries) => {\n      entries.items.forEach((e) => {\n        if (\n          e.fields.hasOwnProperty(fieldName) &&\n          e.fields[fieldName].hasOwnProperty(\"en-US\")\n        ) {\n          e.fields[fieldName][\"en-US\"].forEach((t) => {\n            allValues.push(t);\n          });\n        }\n      });\n      uniqueValues = allValues.filter(function (item, pos) {\n        return allValues.indexOf(item) === pos;\n      });\n      setAllEntryValues(uniqueValues);\n    });\n  }, []);\n\n  props.sdk.field.onValueChanged((value) => {\n    if (value && value.length !== values.length) {\n      setValues(value);\n    }\n  });\n\n  return (\n    <>\n      <TextField\n        onChange={(e) => setNewValue(e.target.value)}\n        value={newValue}\n        labelText={`Add a new ${fieldName}`}\n        textInputProps={{\n          placeholder: `type a new ${fieldName} and hit the add button`,\n        }}\n      />\n\n      <Button style={{ margin: \"1em 0\" }} onClick={updateFieldValue}>\n        Add\n      </Button>\n      <SectionHeading element=\"H6\">\n        Or select an existing {fieldName}\n      </SectionHeading>\n      <Select\n        style={{ marginBottom: \"1em\" }}\n        onChange={(e) => updateFieldValueSelect(e)}\n      >\n        {allEntryValues &&\n          allEntryValues.map((v) => (\n            <Option value={v} key={v}>\n              {v}\n            </Option>\n          ))}\n      </Select>\n\n      {values ? (\n        <Flex\n          flexDirection=\"row\"\n          justifyContent=\"start\"\n          alignItems=\"start\"\n          flexWrap=\"wrap\"\n        >\n          {values.map((v) => (\n            <>\n              <Pill\n                style={{ margin: \".25em\" }}\n                onClose={() => removeValue(v)}\n                label={v}\n                key={v}\n              />\n            </>\n          ))}\n        </Flex>\n      ) : (\n        \"\"\n      )}\n    </>\n  );\n};\n\nexport default Field;\n",["41","42"],"/Users/jacobsilver/Development/Projects/mark-contentful-app/src/components/ConfigScreen.tsx",[],"/Users/jacobsilver/Development/Projects/mark-contentful-app/src/components/Page.tsx",[],{"ruleId":"43","replacedBy":"44"},{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","severity":1,"message":"48","line":12,"column":3,"nodeType":"49","messageId":"50","endLine":12,"endColumn":12},{"ruleId":"51","severity":1,"message":"52","line":79,"column":6,"nodeType":"53","endLine":79,"endColumn":8,"suggestions":"54"},{"ruleId":"43","replacedBy":"55"},{"ruleId":"45","replacedBy":"56"},"no-native-reassign",["57"],"no-negated-in-lhs",["58"],"@typescript-eslint/no-unused-vars","'Paragraph' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'fieldName', 'props.sdk.space', and 'props.sdk.window'. Either include them or remove the dependency array.","ArrayExpression",["59"],["57"],["58"],"no-global-assign","no-unsafe-negation",{"desc":"60","fix":"61"},"Update the dependencies array to be: [fieldName, props.sdk.space, props.sdk.window]",{"range":"62","text":"63"},[2223,2225],"[fieldName, props.sdk.space, props.sdk.window]"]