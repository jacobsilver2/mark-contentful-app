{"version":3,"sources":["components/ConfigScreen.tsx","components/EntryEditor.tsx","components/Page.tsx","components/Sidebar.tsx","components/Field.tsx","components/Dialog.tsx","index.tsx"],"names":["Config","props","onConfigure","a","sdk","app","getCurrentState","currentState","parameters","state","targetState","this","getParameters","setState","setReady","className","css","margin","Component","Entry","Page","Sidebar","Field","useState","newValue","setNewValue","field","getValue","values","setValues","allEntryValues","setAllEntryValues","fieldName","id","useEffect","window","startAutoResizer","allEntries","space","getEntries","allValues","uniqueValues","then","entries","items","forEach","e","fields","hasOwnProperty","t","push","filter","item","pos","indexOf","onValueChanged","value","length","onChange","target","labelText","textInputProps","placeholder","style","onClick","includes","Notification","warning","duration","canClose","title","setValue","element","marginBottom","updateFieldValueSelect","sort","map","v","flexDirection","justifyContent","alignItems","flexWrap","onClose","filtered","val","removeValue","label","Dialog","init","root","document","getElementById","location","locations","LOCATION_APP_CONFIG","component","LOCATION_ENTRY_FIELD","LOCATION_ENTRY_EDITOR","EntryEditor","LOCATION_DIALOG","LOCATION_ENTRY_SIDEBAR","LOCATION_PAGE","componentLocationSetting","is","render"],"mappings":"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","file":"static/js/main.db1edc56.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { AppExtensionSDK } from 'contentful-ui-extensions-sdk';\nimport { Heading, Form, Workbench, Paragraph } from '@contentful/forma-36-react-components';\nimport { css } from 'emotion';\n\nexport interface AppInstallationParameters {}\n\ninterface ConfigProps {\n  sdk: AppExtensionSDK;\n}\n\ninterface ConfigState {\n  parameters: AppInstallationParameters;\n}\n\nexport default class Config extends Component<ConfigProps, ConfigState> {\n  constructor(props: ConfigProps) {\n    super(props);\n    this.state = { parameters: {} };\n\n    // `onConfigure` allows to configure a callback to be\n    // invoked when a user attempts to install the app or update\n    // its configuration.\n    props.sdk.app.onConfigure(() => this.onConfigure());\n  }\n\n  async componentDidMount() {\n    // Get current parameters of the app.\n    // If the app is not installed yet, `parameters` will be `null`.\n    const parameters: AppInstallationParameters | null = await this.props.sdk.app.getParameters();\n\n    this.setState(parameters ? { parameters } : this.state, () => {\n      // Once preparation has finished, call `setReady` to hide\n      // the loading screen and present the app to a user.\n      this.props.sdk.app.setReady();\n    });\n  }\n\n  onConfigure = async () => {\n    // This method will be called when a user clicks on \"Install\"\n    // or \"Save\" in the configuration screen.\n    // for more details see https://www.contentful.com/developers/docs/extensibility/ui-extensions/sdk-reference/#register-an-app-configuration-hook\n\n    // Get current the state of EditorInterface and other entities\n    // related to this app installation\n    const currentState = await this.props.sdk.app.getCurrentState();\n\n    return {\n      // Parameters to be persisted as the app configuration.\n      parameters: this.state.parameters,\n      // In case you don't want to submit any update to app\n      // locations, you can just pass the currentState as is\n      targetState: currentState\n    };\n  };\n\n  render() {\n    return (\n      <Workbench className={css({ margin: '80px' })}>\n        <Form>\n          <Heading>App Config</Heading>\n          <Paragraph>Welcome to your contentful app. This is your config page.</Paragraph>\n        </Form>\n      </Workbench>\n    );\n  }\n}\n","import React from 'react';\nimport { Paragraph } from '@contentful/forma-36-react-components';\nimport { EditorExtensionSDK } from 'contentful-ui-extensions-sdk';\n\ninterface EditorProps {\n  sdk: EditorExtensionSDK;\n}\n\nconst Entry = (props: EditorProps) => {\n  return <Paragraph>Hello Entry Editor Component</Paragraph>;\n};\n\nexport default Entry;\n","import React from 'react';\nimport { Paragraph } from '@contentful/forma-36-react-components';\nimport { PageExtensionSDK } from 'contentful-ui-extensions-sdk';\n\ninterface PageProps {\n  sdk: PageExtensionSDK;\n}\n\nconst Page = (props: PageProps) => {\n  return <Paragraph>Hello Page Component</Paragraph>;\n};\n\nexport default Page;\n","import React from 'react';\nimport { Paragraph } from '@contentful/forma-36-react-components';\nimport { SidebarExtensionSDK } from 'contentful-ui-extensions-sdk';\n\ninterface SidebarProps {\n  sdk: SidebarExtensionSDK;\n}\n\nconst Sidebar = (props: SidebarProps) => {\n  return <Paragraph>Hello Sidebar Component</Paragraph>;\n};\n\nexport default Sidebar;\n","// @ts-nocheck\nimport React, { useState, useEffect } from \"react\";\nimport {\n  TextField,\n  Button,\n  Pill,\n  Flex,\n  Select,\n  Option,\n  Notification,\n  SectionHeading,\n  Paragraph,\n} from \"@contentful/forma-36-react-components\";\nimport { FieldExtensionSDK } from \"contentful-ui-extensions-sdk\";\n\ninterface FieldProps {\n  sdk: FieldExtensionSDK;\n}\n\nconst Field = (props: FieldProps) => {\n  const [newValue, setNewValue] = useState(\"\");\n  const [values, setValues] = useState(props.sdk.field.getValue() || []);\n  const [allEntryValues, setAllEntryValues] = useState([]);\n\n  const fieldName = props.sdk.field.id;\n\n  function updateFieldValue() {\n    if (values && values.includes(newValue)) {\n      return Notification.warning(`${newValue} has already been added.`, {\n        duration: 3000,\n        canClose: true,\n        title: \"STOP FUCKING AROUND\",\n      });\n    }\n    values && newValue\n      ? props.sdk.field.setValue([...values, newValue])\n      : props.sdk.field.setValue([newValue]);\n    setNewValue(\"\");\n  }\n\n  function updateFieldValueSelect(e) {\n    if (values && values.includes(e.target.value)) {\n      return Notification.warning(`${e.target.value} has already been added`, {\n        duration: 3000,\n        canClose: true,\n        title: \"STOP FUCKING AROUND\",\n      });\n    }\n    props.sdk.field.setValue([...values, e.target.value]);\n  }\n\n  function removeValue(v) {\n    const filtered = values.filter((val) => val !== v);\n    props.sdk.field.setValue(filtered);\n  }\n\n  useEffect(() => {\n    // makes sure the iframe window height makes the whole component visible\n    props.sdk.window.startAutoResizer();\n    const allEntries = props.sdk.space.getEntries();\n    const allValues = [];\n    let uniqueValues = null;\n    allEntries.then((entries) => {\n      entries.items.forEach((e) => {\n        if (\n          e.fields.hasOwnProperty(fieldName) &&\n          e.fields[fieldName].hasOwnProperty(\"en-US\")\n        ) {\n          e.fields[fieldName][\"en-US\"].forEach((t) => {\n            allValues.push(t);\n          });\n        }\n      });\n      uniqueValues = allValues.filter(function (item, pos) {\n        return allValues.indexOf(item) === pos;\n      });\n      setAllEntryValues(uniqueValues);\n    });\n  }, []);\n\n  props.sdk.field.onValueChanged((value) => {\n    if (value && value.length !== values.length) {\n      setValues(value);\n    }\n  });\n\n  return (\n    <>\n      <TextField\n        onChange={(e) => setNewValue(e.target.value)}\n        value={newValue}\n        labelText={`Add a new ${fieldName}`}\n        textInputProps={{\n          placeholder: `type a new ${fieldName} and hit the add button`,\n        }}\n      />\n\n      <Button style={{ margin: \"1em 0\" }} onClick={updateFieldValue}>\n        Add\n      </Button>\n      <SectionHeading element=\"H6\">\n        Or select an existing {fieldName}\n      </SectionHeading>\n      <Select\n        style={{ marginBottom: \"1em\" }}\n        onChange={(e) => updateFieldValueSelect(e)}\n      >\n        {allEntryValues &&\n          allEntryValues.sort().map((v) => (\n            <Option value={v} key={v}>\n              {v}\n            </Option>\n          ))}\n      </Select>\n\n      {values ? (\n        <Flex\n          flexDirection=\"row\"\n          justifyContent=\"start\"\n          alignItems=\"start\"\n          flexWrap=\"wrap\"\n        >\n          {values.map((v) => (\n            <>\n              <Pill\n                style={{ margin: \".25em\" }}\n                onClose={() => removeValue(v)}\n                label={v}\n                key={v}\n              />\n            </>\n          ))}\n        </Flex>\n      ) : (\n        \"\"\n      )}\n    </>\n  );\n};\n\nexport default Field;\n","import React from 'react';\nimport { Paragraph } from '@contentful/forma-36-react-components';\nimport { DialogExtensionSDK } from 'contentful-ui-extensions-sdk';\n\ninterface DialogProps {\n  sdk: DialogExtensionSDK;\n}\n\nconst Dialog = (props: DialogProps) => {\n  return <Paragraph>Hello Dialog Component</Paragraph>;\n};\n\nexport default Dialog;\n","import React from 'react';\nimport { render } from 'react-dom';\n\nimport {\n  AppExtensionSDK,\n  FieldExtensionSDK,\n  SidebarExtensionSDK,\n  DialogExtensionSDK,\n  EditorExtensionSDK,\n  PageExtensionSDK,\n  init,\n  locations,\n} from 'contentful-ui-extensions-sdk';\nimport '@contentful/forma-36-react-components/dist/styles.css';\nimport '@contentful/forma-36-fcss/dist/styles.css';\nimport '@contentful/forma-36-tokens/dist/css/index.css';\nimport './index.css';\n\nimport Config from './components/ConfigScreen';\nimport EntryEditor from './components/EntryEditor';\nimport Page from './components/Page';\nimport Sidebar from './components/Sidebar';\nimport Field from './components/Field';\nimport Dialog from './components/Dialog';\n\nimport LocalhostWarning from './components/LocalhostWarning';\n\nif (process.env.NODE_ENV === 'development' && window.self === window.top) {\n  // You can remove this if block before deploying your app\n  const root = document.getElementById('root');\n  render(<LocalhostWarning />, root);\n} else {\n  init((sdk) => {\n    const root = document.getElementById('root');\n\n    // All possible locations for your app\n    // Feel free to remove unused locations\n    // Dont forget to delete the file too :)\n    const ComponentLocationSettings = [\n      {\n        location: locations.LOCATION_APP_CONFIG,\n        component: <Config sdk={sdk as AppExtensionSDK} />,\n      },\n      {\n        location: locations.LOCATION_ENTRY_FIELD,\n        component: <Field sdk={sdk as FieldExtensionSDK} />,\n      },\n      {\n        location: locations.LOCATION_ENTRY_EDITOR,\n        component: <EntryEditor sdk={sdk as EditorExtensionSDK} />,\n      },\n      {\n        location: locations.LOCATION_DIALOG,\n        component: <Dialog sdk={sdk as DialogExtensionSDK} />,\n      },\n      {\n        location: locations.LOCATION_ENTRY_SIDEBAR,\n        component: <Sidebar sdk={sdk as SidebarExtensionSDK} />,\n      },\n      {\n        location: locations.LOCATION_PAGE,\n        component: <Page sdk={sdk as PageExtensionSDK} />,\n      },\n    ];\n\n    // Select a component depending on a location in which the app is rendered.\n    ComponentLocationSettings.forEach((componentLocationSetting) => {\n      if (sdk.location.is(componentLocationSetting.location)) {\n        render(componentLocationSetting.component, root);\n      }\n    });\n  });\n}\n"],"sourceRoot":""}